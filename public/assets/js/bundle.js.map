{"version":3,"sources":["app.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["class App {\n  constructor() {\n    this.index = 0;\n    this.currentSelection = null;\n    this.selections = this.getSelections();\n    this.renderSelections(this.selections);\n\n    this.hitPos = {top: 0, left: 0};\n    this.$plan = $('#plan');\n    this.resetSelection();\n\n    const self = this;\n    this.$plan.mousedown(e => {\n      e.preventDefault();\n      // Bind the move and mouseup to handle the drag and select\n      self.$plan.mousemove(self._moveSelection.bind(self));\n      self.$plan.mouseup(self._endSelection.bind(self));\n      self.$plan.mouseleave(self._endSelection.bind(self));\n      self._startSelection(e);\n    });\n\n    $('#plan-file').change(e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.onload = e => $('#plan-img').attr('src', e.target.result);\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    });\n  }\n\n  saveSelection(id, value) {\n    this.selections[id] = value;\n    localStorage.setItem(id, JSON.stringify(value));\n  }\n\n  removeSelection(id) {\n    delete this.selections[id];\n    localStorage.removeItem(id);\n  }\n\n  getSelections() {\n    var data = {};\n    for (var i = 0; i < localStorage.length; ++i) {\n      const value = JSON.parse(localStorage.getItem(localStorage.key(i)));\n      data[localStorage.key(i)] = value;\n    }\n    return data;\n  }\n\n  renderSelections(selections) {\n    const self = this, $plan = $('#plan');\n    for (var id in selections) {\n      const pos = selections[id];\n      $plan.append($(`<div id='selection_${id}' class='select-box'><div id='selection_close_${id}' class='select-close-button'>x</div></div>`));\n      $(`#selection_${id}`).css({\n        top: pos.top,\n        left: pos.left,\n        width: `${pos.width}px`,\n        height: `${pos.height}px`,\n      });\n      $(`#selection_close_${id}`).click(function(id) {\n        return e => {\n          e.preventDefault();\n          const $selection = $(`#selection_${id}`);\n          self.removeSelection(id);\n          $selection.remove();\n        };\n      }(id));\n    }\n  }\n\n  resetSelection() {\n    if (this.$currentSelection) {\n      this.$currentSelection.css({ top: 0, left: 0, width: 0, height: 0 });\n    }\n  }\n\n  _addSelection() {\n    const $plan = $('#plan'),\n          id = `selection_${++this.index}`,\n          closeId = `selection_close_${this.index}`,\n          $selection = $(`<div id='${id}' class='select-box'><div id='${closeId}' class='select-close-button' style='display: none'>x</div></div>`);\n    $plan.append($selection);\n    this.$currentSelection = $selection;\n  }\n\n  _startSelection(e) {\n    const left = e.offsetX, top = e.offsetY;\n    this._addSelection();\n    this.hitPos.left = left;\n    this.hitPos.top = top;\n    this.$currentSelection.css({ left, top });\n  }\n\n  _moveSelection(e) {\n    console.log(e.offsetX);\n    const w = -(this.hitPos.left - e.offsetX), h = -(this.hitPos.top - e.offsetY);\n    this.$currentSelection.css({ width: w, height: h });\n  }\n\n  _endSelection(e) {\n    const closeId = `selection_close_${this.index}`, self = this;\n\n    // If selection is insignificantly small, we don't select\n    if (this.$currentSelection.width() < 10 ||\n        this.$currentSelection.height() < 10) {\n      this.$currentSelection.remove();\n      return;\n    }\n\n    $(`#${closeId}`).show();\n\n    // Attach close button handler\n    $(`#${closeId}`).click(function(id) {\n      return e => {\n        e.preventDefault();\n        const $selection = $(`#selection_${id}`);\n        self.removeSelection(id);\n        $selection.remove();\n      };\n    }(this.index));\n\n    this.saveSelection(this.index, {\n      ...this.$currentSelection.position(),\n      width: this.$currentSelection.width(),\n      height: this.$currentSelection.height(),\n    });\n    this.$plan.unbind(\"mousemove\");\n    this.$plan.unbind(\"mouseup\");\n    this.$plan.unbind(\"mouseleave\");\n  }\n}\n\nconst app = new App();\n"]}